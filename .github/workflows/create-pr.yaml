--- 
name: Create PR

on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: The branch to create the PR for
        type: choice 
        options: 
        - test/1
        - test/2
        - test/3
        - test/4
        - test/5
        - test/6
        - test-1
        - test_1
        - "1234"
      content: 
        required: true
        description: The content of the PR
        default: 'test'

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'main'
      - uses: actions/setup-node@v2
      - run: npm install yaml
      - name: generate branch name
        id: branch-name
        run: |
          echo '::set-output name=branch::${{ github.event.inputs.branch }}'
      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const YAML = require('yaml')

            const branch = "${{ steps.branch-name.outputs.branch }}"
            const newValue = "${{ github.event.inputs.content }}"

            const owner = "hairmare"
            const repo = "oktokit-action-pr-test"
            const ref = "heads/main"

            console.log("Creating branch '" + branch + "' for PR")

            // update YAML
            const yamlFileName = "test.yaml"
            const yamlData = YAML.parseAllDocuments(
              fs.readFileSync(`./${yamlFileName}`, 'utf8'),
              {
                keepCstNodes: true,
              },
            )

            // get reference to parent branch
            const { data: baseRefData } = await github.rest.git.getRef({
              owner,
              repo,
              ref,
            });
            console.log("Got reference to parent branch: " + baseRefData.object.sha);
            // check if we already have a ref:
            try {
              const { data: refData } = await github.rest.git.getRef({
                owner,
                repo,
                ref: `heads/${branch}`,
              });
              console.log("Branch already exists: " + refData.object.sha);
            } catch (error) {
              // create a new reference 
              const { data: newBranchRef } = await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/heads/${branch}`,
                sha: baseRefData.object.sha,
              });
              console.log("Created new branch reference: " + newBranchRef.object.sha);
            }
            // create a new tree:
            const { data: newTree } = await github.rest.git.createTree({
              owner,
              repo,
              tree: [
                {
                  path: yamlFileName,
                  mode: "100644",
                  type: "blob",
                  // TODO less hacky way to dump roundtripped data (multi-docs)
                  content: String(yamlData[0]),
                },
              ],
              base_tree: baseRefData.object.sha,
            });
            console.log("Created new tree: " + newTree.sha);
            const { data: newCommit } = await github.rest.git.createCommit({
              owner,
              repo,
              message: ":tada: test commit",
              tree: newTree.sha,
              parents: [baseRefData.object.sha],
            });
            console.log("Created new commit: " + newCommit.sha);
            console.log(newCommit)
            // update branch ref to new commit
            const { data: updatedBranchRef } = await github.rest.git.updateRef({
              owner,
              repo,
              ref: `heads/${branch}`,
              sha: newCommit.sha,
              force: true,
            });
            console.log("Updated branch reference: " + updatedBranchRef.object.sha);
            console.log(updatedBranchRef)
            // create PR :)
            try {
              const { data: newPR } = await github.rest.pulls.create({
                owner,
                repo,
                title: "ðŸ¥º",
                head: branch,
                base: "main",
              });
              console.log("Created new PR: " + newPR.number);
              console.log(newPR)
            } catch (error) {
              // TODO rethrow if error.message does not contain "A pull request already exists for"
              console.log(error)
            }

            if (newPR) {
              rest.pulls.requestReviewers({
                owner,
                repo,
                newPR.number,
              });
            } 
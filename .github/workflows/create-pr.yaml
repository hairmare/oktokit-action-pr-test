--- 
name: Create PR

on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: The branch to create the PR for
        type: choice 
        options: 
        - test
        - test/1
        - test-1
        - test_1
        - "1234"
      content: 
        required: true
        description: The content of the PR
        default: 'test'

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: change contents 
        run: |
          echo '${{ github.event.inputs.content }}' >> content.txt
      - name: generate branch name
        id: branch-name
        run: |
          echo '::set-output name=branch::${{ github.event.inputs.branch }}'
      - uses: actions/github-script@v6
        with:
          script: |
            const branch = "${{ steps.branch-name.outputs.branch }}"

            const owner = "hairmare"
            const repo = "oktokit-action-pr-test"
            const ref = "heads/main"

            console.log("Creating branch '" + branch + "' for PR")

            // get reference to parent branch
            const { data: baseRefData } = await github.rest.git.getRef({
              owner,
              repo,
              ref,
            });
            console.log("Got reference to parent branch: " + baseRefData.object.sha);

            // create a new reference 
            const { data: newBranchRef } = await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${branch}`,
              sha: baseRefData.object.sha,
            });
            console.log("Created new branch reference: " + newBranchRef.object.sha);

            // create a new tree:
            const { data: newTree } = await github.rest.git.createTree({
              owner,
              repo,
              tree: [
                {
                  path: "content.txt",
                  mode: "100644",
                  type: "blob",
                  content: "${{ github.event.inputs.content }}",
                },
              ],
              base_tree: baseRefData.object.sha,
            });
            console.log("Created new tree: " + newTree.sha);

            const { data: newCommit } = await github.rest.git.createCommit({
              owner,
              repo,
              message: ":tada: test commit",
              tree: newTree.sha,
              parents: [baseRefData.object.sha],
            });
            console.log("Created new commit: " + newCommit.sha);
            console.log(newCommit)

            // update branch ref to new commit
            const { data: updatedBranchRef } = await github.rest.git.updateRef({
              owner,
              repo,
              ref: newBranchRef.object.sha,
              sha: newCommit.sha,
            });
            console.log("Updated branch reference: " + updatedBranchRef.object.sha);
            console.log(updatedBranchRef)